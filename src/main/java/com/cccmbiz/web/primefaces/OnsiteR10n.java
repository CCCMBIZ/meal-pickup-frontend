package com.cccmbiz.web.primefaces;

import com.cccmbiz.web.*;
import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Named;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@Named
@SessionScoped
public class OnsiteR10n {

    private static final Logger logger = LoggerFactory.getLogger(OnsiteR10n.class);

    @Autowired
    private FamilyRepository familyRepository;

    @Autowired
    private ProfileRepository profileRepository;

    @Autowired
    private PersonRepository personRepository;

    @Autowired
    private MealplanRepository mealplanRepository;

    @Autowired
    private PaymentRepository paymentRepository;


    private Family family;
    private List<Person> personList;
    private Mealplan mealplan;
    private String registrationFee ;
    private String mealFee ;

    //Generated by Map
    private static final Map<String, Integer> quantityGroup;

    static {
        quantityGroup = new LinkedHashMap<String, Integer>();
        quantityGroup.put("0", 0);
        quantityGroup.put("1", 1); //label, value
        quantityGroup.put("2", 2);
        quantityGroup.put("3", 3);
        quantityGroup.put("4", 4); //label, value
        quantityGroup.put("5", 5);
        quantityGroup.put("6", 6);
        quantityGroup.put("7", 7); //label, value
        quantityGroup.put("8", 8);
        quantityGroup.put("9", 9);

    }

    public Map<String, Integer> getQuantityGroup() {
        return quantityGroup;
    }

    private static final Map<String, String> ageGroup;

    static {
        ageGroup = new LinkedHashMap<String, String>();
        ageGroup.put("18-29", "A2");
        ageGroup.put("30-39", "A3");
        ageGroup.put("40-49", "A4");
        ageGroup.put("50-59", "A5");
        ageGroup.put("60+", "A6");
        ageGroup.put("17", "17");
        ageGroup.put("16", "16");
        ageGroup.put("15", "15");
        ageGroup.put("14", "14");
        ageGroup.put("13", "13");
        ageGroup.put("12", "12");
        ageGroup.put("11", "11");
        ageGroup.put("10", "10");
        ageGroup.put("9", "9");
        ageGroup.put("8", "8");
        ageGroup.put("7", "7");
        ageGroup.put("6", "6");
        ageGroup.put("5", "5");
        ageGroup.put("4", "4");
        ageGroup.put("3", "3");
        ageGroup.put("2", "2");
        ageGroup.put("1", "1");
        ageGroup.put("0", "0");
    }

    public  Map<String, String> getAgeGroup() {
        return ageGroup;
    }

    public Family getFamily() {

        if (family == null) {
            family = new Family();
        }
        return family;
    }

    public void setFamily(Family family) {
        this.family = family;
    }

    public List<Person> getPersonList() {

        if (personList == null) {
            personList = new ArrayList<>();
            Person person = new Person();
            personList.add(person);
        }
        return personList;
    }

    public void setPersonList(List<Person> personList) {
        this.personList = personList;
    }

    public Mealplan getMealplan() {

        if (mealplan == null) {
            mealplan = new Mealplan();
        }
        return mealplan;
    }

    public void setMealplan(Mealplan mealplan) {
        this.mealplan = mealplan;
    }

    public String getRegistrationFee() {
        return registrationFee;
    }

    public String getMealFee() {
        return mealFee;
    }

    public String processRegistration() {

        try {

            for (Person p : personList) {
                logger.debug(p.getFirstName());

                if (p.getChineseName().isEmpty() ||
                        p.getFirstName().isEmpty() ||
                        p.getLastName().isEmpty() ||
                        p.getGender().isEmpty() ||
                        p.getAge().isEmpty() ||
                        p.getMisc1().isEmpty()
                ) {
                    throw new ScanMealException("沒提供全部的资料Missing personal information");
                }

                if (family.getMisc1().isEmpty()) {
                    throw new ScanMealException("請提供連系资料Missing contact information");
                }
            }

            family.setChurchId("1");
            Family fa = familyRepository.save(family);
            logger.debug("family ID: " + fa.getFamilyId() + " " + family.getFamilyId());

            Integer rfee= 0 ;
            Integer mfee = 0 ;

            for (Person p : personList) {
                p.setFamilyId(fa.getFamilyId());
                p.setEmail(fa.getMisc1());
                p.setChurchId(1);

                Integer regFee = Integer.parseInt(p.getMisc1());

                if (regFee == 1 || regFee == 2) {
                    rfee += (25 * regFee) ;
                } else {
                    rfee += 60 ;
                }

                Person pe = personRepository.save(p);

                logger.debug("Person ID: " + pe.getPersonId() + " " + p.getPersonId());

                Profile profile = new Profile();
                profile.setFamilyId(fa.getFamilyId());
                profile.setChurchId(1);
                profile.setPersonId(pe.getPersonId());

                DateTime now = DateTime.now();
                Timestamp ts = new Timestamp(now.getMillis());
                profile.setRegisteredDate(ts);
                profile.setRegistrationId(String.valueOf(fa.getFamilyId()));

                profileRepository.save(profile);
            }

            mealplan.setRegistrationId(String.valueOf(fa.getFamilyId()));

            mfee += (mealplan.getBreakfast2() + mealplan.getBreakfast3() + mealplan.getBreakfast4()) * 5;
            mfee += (mealplan.getLunch2() + mealplan.getLunch3() + mealplan.getLunch4()) * 7;
            mfee += (mealplan.getDinner1() + mealplan.getDinner2() + mealplan.getDinner3()) * 9;

            mealplanRepository.save(mealplan);

            Payment payment = new Payment();
            payment.setRegistrationId((long) fa.getFamilyId());
            payment.setMealFee(mfee.doubleValue());
            payment.setRegistrationFee(rfee.doubleValue());

            paymentRepository.save(payment);

            registrationFee = String.valueOf(rfee);
            mealFee = String.valueOf(mfee);


        } catch (ScanMealException re) {
            FacesContext context = FacesContext.getCurrentInstance();
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "抱歉! ", re.getMessage()));
            return "onsiter10n";
        }

        return "confirmation";
    }

    public String addAction() {

        if (personList == null) {
            personList = new ArrayList<>();
        }

        logger.debug("Before adding List:" + personList.size());
        for (Person p : personList) {
            logger.debug("Chinese Name:" + p.getChineseName());
        }
        Person person = new Person();
        person.setChineseName("" + personList.size());
        personList.add(person);
        logger.debug("After adding List:" + personList.size());
        return "success";
    }

    public String deleteAction(Person p) {

        logger.debug("Deleting " + p.getChineseName());
        personList.remove(p);

        return "success";
    }


    public void reset() {
        family = null;
        personList = null ;
        mealplan = null ;
    }
}
